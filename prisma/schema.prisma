generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model labels {
  id          Int           @id @default(autoincrement())
  user_id     Int
  name        String        @db.VarChar(255)
  color       String?       @default("#808080") @db.VarChar(50)
  created_at  DateTime      @default(now()) @db.Timestamptz(6)
  users       users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  todo_labels todo_labels[]
}

model notifications {
  id         Int       @id @default(autoincrement())
  user_id    Int
  title      String    @db.VarChar(255)
  message    String
  is_read    Boolean?  @default(false)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  users      users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user")
}

model password_reset_tokens {
  id         Int       @id @default(autoincrement())
  user_id    Int
  token      String    @unique @db.VarChar(255)
  expires    DateTime  @db.Timestamp(6)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([token], map: "idx_password_reset_tokens_token")
  @@index([user_id], map: "idx_password_reset_tokens_user_id")
}

model pomodoroLog {
  id          String   @id(map: "PomodoroLog_pkey")
  userId      String
  taskId      Int?
  duration    Int
  mode        String
  startedAt   DateTime @default(now())
  completedAt DateTime @default(now())

  @@index([taskId], map: "PomodoroLog_taskId_idx")
  @@index([userId], map: "PomodoroLog_userId_idx")
}

model projects {
  id            Int             @id @default(autoincrement())
  user_id       Int
  name          String          @db.VarChar(255)
  color         String?         @default("#808080") @db.VarChar(50)
  is_favorite   Boolean?        @default(false)
  created_at    DateTime        @default(now()) @db.Timestamptz(6)
  users         users           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  todo_projects todo_projects[]

  @@index([user_id], map: "idx_projects_user_id")
}

model sessions {
  id            Int      @id @default(autoincrement())
  user_id       Int
  session_token String   @unique @db.VarChar(255)
  expires       DateTime @db.Timestamptz(6)
  created_at    DateTime @default(now()) @db.Timestamptz(6)
  users         users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model task_notifications_read {
  id           Int      @id @default(autoincrement())
  user_id      Int
  last_read_at DateTime @default(now()) @db.Timestamp(6)
  users        users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model task_comments {
  id         Int       @id @default(autoincrement())
  task_id    Int
  user_id    Int
  content    String
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  task       todos     @relation("TaskComments", fields: [task_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       users     @relation("UserComments", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([task_id], map: "idx_task_comments_task_id")
  @@index([user_id], map: "idx_task_comments_user_id")
}

model todo_labels {
  todo_id  Int
  label_id Int
  labels   labels @relation(fields: [label_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  todos    todos  @relation(fields: [todo_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([todo_id, label_id])
}

model todo_projects {
  todo_id    Int
  project_id Int
  projects   projects @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  todos      todos    @relation(fields: [todo_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([todo_id, project_id])
  @@index([todo_id], map: "idx_todo_projects_todo_id")
}

model todos {
  id             Int             @id @default(autoincrement())
  user_id        Int
  title          String
  description    String?
  due_date       DateTime?       @db.Timestamptz(6)
  priority       Int?            @default(4)
  completed      Boolean         @default(false)
  created_at     DateTime        @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?       @db.Timestamptz(6)
  kanban_column  String?         @db.VarChar(20)
  points         Int?            @default(3)
  attachments    Json?           @default("[]")
  estimated_time Int?
  kanban_order   Int?
  comments       task_comments[] @relation("TaskComments")
  todo_labels    todo_labels[]
  todo_projects  todo_projects[]
  users          users           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([estimated_time], map: "idx_todos_estimated_time")
  @@index([kanban_column], map: "idx_todos_kanban_column")
  @@index([points], map: "idx_todos_points")
  @@index([user_id], map: "idx_todos_user_id")
}

model user_settings {
  user_id                      Int       @id
  theme                        String?   @default("light") @db.VarChar(20)
  pomodoro_work_minutes        Int?      @default(25)
  pomodoro_break_minutes       Int?      @default(5)
  pomodoro_long_break_minutes  Int?      @default(15)
  pomodoro_cycles              Int?      @default(4)
  created_at                   DateTime  @default(now()) @db.Timestamptz(6)
  updated_at                   DateTime? @db.Timestamptz(6)
  enable_sound                 Boolean?  @default(true)
  notification_sound           String?   @default("default") @db.VarChar(50)
  enable_desktop_notifications Boolean?  @default(true)
  language                     String?   @default("en") @db.VarChar(10)
  enable_task_notifications    Boolean   @default(true)
  task_notification_days       Int       @default(3)
  pomodoro_sound               String    @default("pomodoro") @db.VarChar(50)
  spotify_playlist_url         String?
  enable_flip_clock            Boolean   @default(true)
  flip_clock_size              String    @default("medium") @db.VarChar(20)
  flip_clock_color             String    @default("#ff5722") @db.VarChar(20)
  enable_spotify               Boolean   @default(true)
  spotifyEnabled               Boolean?  @default(false)
  spotifyPlaylistUrl           String?
  users                        users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id                      Int                       @id @default(autoincrement())
  name                    String?                   @db.VarChar(255)
  email                   String                    @unique @db.VarChar(255)
  password                String                    @db.VarChar(255)
  created_at              DateTime                  @default(now()) @db.Timestamptz(6)
  updated_at              DateTime?                 @db.Timestamptz(6)
  avatar_url              String?
  attachments             attachments[]
  labels                  labels[]
  notifications           notifications[]
  password_reset_tokens   password_reset_tokens[]
  projects                projects[]
  sessions                sessions[]
  comments                task_comments[]           @relation("UserComments")
  task_notifications_read task_notifications_read[]
  todos                   todos[]
  user_settings           user_settings?
}

model attachments {
  id            Int      @id @default(autoincrement())
  user_id       Int
  entity_type   String   @db.VarChar(20)
  entity_id     Int
  file_name     String   @db.VarChar(255)
  original_name String   @db.VarChar(255)
  file_path     String
  file_size     BigInt
  mime_type     String   @db.VarChar(100)
  alt_text      String?
  description   String?
  created_at    DateTime @default(now()) @db.Timestamptz(6)
  updated_at    DateTime @default(now()) @db.Timestamptz(6)
  users         users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_attachments_user")

  @@index([created_at(sort: Desc)], map: "idx_attachments_created_at")
  @@index([entity_type, entity_id], map: "idx_attachments_entity")
  @@index([file_size], map: "idx_attachments_file_size")
  @@index([mime_type], map: "idx_attachments_mime_type")
  @@index([user_id], map: "idx_attachments_user_id")
}
